/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__data__ = __webpack_require__(/*! ./data */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_raf__ = __webpack_require__(/*! raf */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_raf___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_raf__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_domready__ = __webpack_require__(/*! domready */ 6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_domready___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_domready__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__noise__ = __webpack_require__(/*! ./noise */ 7);

// automatically stop recording after this number of frames
// set to 0 to keep recording until ESC is pressed
var HARD_FRAME_LIMIT = 1000;








var simplex = new __WEBPACK_IMPORTED_MODULE_3__noise__["a" /* default */](Math.random);

var canvas = void 0,
    ctx = void 0,
    width = void 0,
    height = void 0,
    halfWidth = void 0,
    halfHeight = void 0,
    xPos = 0,
    yPos = 0,
    angleOffset = 0,
    angleOffset2 = 0;

var NOISE_SCALE = 0.8;

var noiseStrength = void 0;

var tmp = {
    x: 0, y: 0
};

var running = true;

var capturer = typeof CCapture !== "undefined" && new CCapture({ format: 'png',
    framerate: 60
});

function noisy(x, y) {
    x -= halfWidth;
    y -= halfHeight;

    var angle = Math.atan2(y, x) + angleOffset;

    var d = Math.sqrt(x * x + y * y) * 0.005;

    var nx = Math.cos(angle) * d;
    var ny = Math.sin(angle) * d;

    tmp.x = halfWidth + x + simplex.noise2D((nx + xPos) * NOISE_SCALE, (ny + yPos) * NOISE_SCALE) * noiseStrength;
    tmp.y = halfHeight + y + simplex.noise2D((ny + yPos) * NOISE_SCALE, (nx + xPos) * NOISE_SCALE) * noiseStrength;
    return tmp;
}

var aabb = __WEBPACK_IMPORTED_MODULE_0__data__["a" /* default */].aabb,
    groups = __WEBPACK_IMPORTED_MODULE_0__data__["a" /* default */].groups;


var hue = 0;
var step = -360 / (groups.length + 1);

var bg = "#3B3A3A";

for (var i = 0; i < groups.length; i++) {
    hue += step;
    groups[i].color = i === groups.length - 1 ? "#0220B1" : (i & 1) === 0 ? "#222" : "#e8e8e8";
}

var logged = false;
var count = 0;

window.marked = 0;
var printed = -1;

function mainLoop() {
    if (count === 0) {
        xPos += 0.0011;
        yPos += 0.0007;

        angleOffset += 0.005;
        angleOffset2 += 0.003;

        noiseStrength = (0.7 + Math.sin(angleOffset2) * 0.3) * width * 0.02;
    }

    var aabb = __WEBPACK_IMPORTED_MODULE_0__data__["a" /* default */].aabb,
        groups = __WEBPACK_IMPORTED_MODULE_0__data__["a" /* default */].groups;


    var scaleFactor = Math.min(width / (aabb.maxX - aabb.minX), height / (aabb.maxY - aabb.minY));

    ctx.fillStyle = bg;
    ctx.fillRect(0, 0, width, height);

    var hw = halfWidth * 1.2 - (aabb.maxX - aabb.minX) * scaleFactor / 2;
    var hh = halfHeight - (aabb.maxY - aabb.minY) * scaleFactor / 2;

    var pathCount = 0;

    for (var _i = 0; _i < groups.length; _i++) {
        var _groups$_i = groups[_i],
            color = _groups$_i.color,
            paths = _groups$_i.paths;


        ctx.fillStyle = color;

        for (var j = 0; j < paths.length; j++) {
            var array = paths[j];
            ctx.beginPath();

            var _noisy = noisy(hw + (array[0] - aabb.minX) * scaleFactor, hh + (array[1] - aabb.minY) * scaleFactor),
                x0 = _noisy.x,
                y0 = _noisy.y;

            ctx.moveTo(x0, y0);

            if (pathCount === window.marked) {
                ctx.strokeStyle = "#f00";
                if (printed !== window.marked) {
                    console.log("#" + window.marked, array);
                    printed = window.marked;
                }
            } else {
                ctx.strokeStyle = "#000";
            }

            for (var k = 2; k < array.length; k += 2) {
                var _noisy2 = noisy(hw + (array[k] - aabb.minX) * scaleFactor, hh + (array[k + 1] - aabb.minY) * scaleFactor),
                    x = _noisy2.x,
                    y = _noisy2.y;

                ctx.lineTo(x, y);
            }

            ctx.stroke();
            pathCount++;
        }
    }

    count++;
    if (capturer) {
        if (HARD_FRAME_LIMIT && count > HARD_FRAME_LIMIT) {
            capturer.capture(canvas);

            running = false;
            capturer.stop();
            capturer.save();
        }
    }

    if (running) {
        __WEBPACK_IMPORTED_MODULE_1_raf___default()(mainLoop);
    }
}

__WEBPACK_IMPORTED_MODULE_2_domready___default()(function () {
    canvas = document.getElementById("screen");

    width = window.innerWidth & ~7;
    height = window.innerHeight & ~3;

    halfWidth = width / 2;
    halfHeight = height / 2;

    canvas.width = width;
    canvas.height = height;

    ctx = canvas.getContext("2d");

    if (capturer) {
        capturer.start();

        window.addEventListener("keydown", function (ev) {
            if (ev.keyCode === 27) {
                running = false;
                capturer.stop();
                capturer.save();
            }
        }, true);
    }

    __WEBPACK_IMPORTED_MODULE_1_raf___default()(mainLoop);
});

/***/ }),
/* 1 */
/*!*********************!*\
  !*** ./src/data.js ***!
  \*********************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({ "groups": [{ "color": "#000", "paths": [[81.111591, 6.6193827, 77.17774489062501, 6.707915813281249, 69.43267543554688, 7.8035840029296875, 61.92102299023436, 9.929864380273438, 54.73864276953124, 13.007078980859374, 47.98138998828125, 16.955549840234376, 41.74511986132812, 21.69559899394531, 36.12568760351563, 27.147548477539065, 31.2189484296875, 33.231720326562495, 29.09848, 36.507353, 27.6701582421875, 39.1022129375, 25.52935890429687, 44.59997368554688, 24.237456365234376, 50.35672892773438, 23.78321038671875, 56.24952916015626, 24.15538073046875, 62.15542487890626, 25.342727158203125, 67.95146658007815, 27.334009431640624, 73.51470475976562, 30.1179873125, 78.7221899140625, 31.836050999999998, 81.131596, 31.6469094375, 84.88701648437501, 32.3386561875, 92.31156616796875, 34.2246961875, 99.50419052734375, 37.20531543749999, 106.32224980468752, 41.1807999375, 112.62310424218752, 46.05143568749999, 118.26411408203126, 51.7175086875, 123.10263956640625, 58.0793049375, 126.9960409375, 61.512694999999994, 128.49545, 65.5719769765625, 130.18190625, 74.04252727929688, 132.1639228125, 82.71085892773436, 132.54974906249998, 91.32741383984373, 131.42036812499998, 99.64263393359374, 128.856763125, 107.40696112695312, 124.93991718749999, 114.37083733789062, 119.7508134375, 120.28470448437498, 113.370435, 122.71054999999998, 109.71425, 125.58789749999998, 104.84957350000002, 129.09697124999997, 94.14106075000001, 129.70344999999998, 88.524528, 131.60695390625, 85.4777867265625, 134.614936484375, 79.00005010351563, 136.66787679687502, 72.17650629882813, 137.76998375, 65.13526387890626, 137.92546625, 58.00443141015626, 137.138533203125, 50.91211745898438, 135.413393515625, 43.986430591796875, 132.75425609375003, 37.355479375, 131.0371, 34.210851, 129.249951796875, 31.1567050609375, 125.00575740234376, 25.52512228222656, 120.04988419921875, 20.517528954882813, 114.48477527343752, 16.191634558984376, 108.4128737109375, 12.605148574609373, 101.93662259765625, 9.815780481835937, 95.15846501953125, 7.881239760742187, 88.1808440625, 6.85923589140625, 84.64734, 6.7500987, 85.4522341640625, 6.8153092546875005, 86.04150879052735, 6.8590904615478525, 86.14568426129149, 6.86482402116394, 86.15445640913092, 6.864527918209845, 86.15480827437295, 6.864437526635024, 86.15492259509463, 6.864372420870441, 86.15495028062719, 6.864344908462796, 86.1549659552521, 6.86431641779131, 86.15496963405201, 6.8642869504023025, 86.15496133210951, 6.864256507842088, 86.15494106450728, 6.864225091656984, 86.15488975147942, 6.864176266435111, 86.15413491442965, 6.863846983929776, 86.14751394891357, 6.862595691549682, 85.737982875, 6.8216488640624995, 83.5044735, 6.6506078203125, 81.83719069921875, 6.568751721679687, 81.30923456689455, 6.572642035620118, 81.16319297589112, 6.590048037680054, 81.12484569394685, 6.6031482817668925, 81.11498910571004, 6.610864218547582, 81.1124711590687, 6.615021953618879, 81.11167273052214, 6.617902918228912, 81.111591, 6.6193827, 81.111591, 6.6193827, 31.669762, 32.687122, 32.183251, 32.348923, 32.183251, 32.348923, 30.82552471875, 33.947844843750005, 30.558215116699216, 34.28602405517579, 30.5238030218811, 34.321281229339604, 30.515754579445833, 34.3270375551138, 30.513398444728367, 34.32812447966052, 30.512019446536655, 34.32839511552179, 30.511262593749933, 34.32834813571698, 30.510643697219066, 34.328108426781, 30.510161532643313, 34.32767803116131, 30.509814875721933, 34.32705899130535, 30.509602502154173, 34.326253349660576, 30.509516642107485, 34.32472216365195, 30.510196032474518, 34.32048313344956, 30.51485641378784, 34.3074700058899, 30.53656084863281, 34.26467600683594, 30.905912999999998, 33.69879075, 31.345385, 33.221074, 31.345385, 33.221074]] }, { "color": "#d0d", "paths": [[81.301851, 30.56408, 76.6056491875, 30.8101884375, 67.617922703125, 33.370278375, 59.50085401562501, 38.064418124999996, 52.68227115625, 44.5066100625, 49.974451, 48.311312, 50.1534953984375, 47.9888212109375, 50.23482262438966, 47.83043436157226, 50.240135281393066, 47.81703597829819, 50.240633596395625, 47.81494058955694, 50.2406768126648, 47.81425536664889, 50.240632274375045, 47.81392777799189, 50.24055585783496, 47.81375791312949, 50.24048673182663, 47.81367673673418, 50.24040206156895, 47.81362298454235, 50.240301884414485, 47.81359659900021, 50.24012455164948, 47.81360480441061, 50.239831604190634, 47.813715542579, 50.23886934015275, 47.81439871509552, 50.22308721582032, 47.83500201171875, 49.96938725, 48.257563906250006, 49.153576625, 49.76440165625, 48.60014116015624, 50.961000734375, 48.3948343203125, 51.572966679687504, 48.382334, 51.76375, 47.73409878125, 54.367661187500005, 47.8892980625, 59.689438109375, 49.6316099375, 64.729674546875, 52.78893321875, 69.02360834375, 54.892645, 70.68533, 55.434023320312505, 71.23125946875, 56.18842868554687, 72.42269177929688, 56.738493328125, 74.373802734375, 56.363778, 78.59862562499998, 55.723381, 81.30716199999999, 55.46862153125, 85.09927256249999, 57.062475500000005, 92.44618054687498, 60.819056375, 98.984139234375, 66.33689684375, 104.13073359375, 69.679125, 105.90589, 72.03653221875001, 107.002979140625, 77.00756023828126, 108.25130141796876, 82.11872469140624, 108.42724115234374, 87.1841146171875, 107.6004035234375, 92.0178190546875, 105.8403937109375, 96.43392704296875, 103.21681689453126, 100.24652762109375, 99.79927825390627, 103.269709828125, 95.65738296875, 104.38266, 93.310722, 105.5984075, 90.18655075, 106.50827749999999, 83.550141625, 106.1493, 80.216046, 108.69339749999999, 77.399151375, 112.28520281249999, 70.75432575, 113.9999540625, 63.37908600000001, 113.747221875, 55.809909375000004, 112.76715999999999, 52.14569300000001, 112.00989226562498, 49.77986334375001, 109.82825662890625, 45.36440118750001, 106.93916470703124, 41.39111906250001, 103.4460208515625, 37.929731906250005, 99.45222941406247, 35.04995465625001, 95.06119474609372, 32.82150225000001, 90.37632119921872, 31.31408962500001, 85.50101312499999, 30.59743171875001, 83.02278799999999, 30.59472700000001, 82.162645, 30.56066700000001, 81.30184899999999, 30.56416700000001, 50.956171, 46.71357003125, 50.75402529882811, 47.029111712890625, 50.704080107177724, 47.116781847412106, 50.691821948333725, 47.14208913485717, 50.68886304343795, 47.14998550822067, 50.68802689642334, 47.15351891265868, 50.68806891697693, 47.155140585098266, 50.688287504612504, 47.15564579284245, 50.688504130609864, 47.15587252418173, 50.688781515364994, 47.156004706712125, 50.68911964632624, 47.15604215393752, 50.689733125094406, 47.15593218831158, 50.692638107818595, 47.15421585977174, 50.70567386743164, 47.14046238110352, 50.75690434960937, 47.07188945117187, 50.95946134375, 46.76245887500001, 51.18611, 46.385466, 51.18611, 46.385466, 70.3521989375, 77.94337150000001, 70.38500126562501, 79.044206921875, 70.33968173706056, 79.26031678735352, 70.33122668735123, 79.27321976278306, 70.32694371146728, 79.2765967205167, 70.32407776035882, 79.27773391295054, 70.32120782594109, 79.27791037617683, 70.31833869754075, 79.27712071977949, 70.31404539545821, 79.2742354188118, 70.30554904095459, 79.26208935943603, 70.27898970898437, 79.16492415039062, 70.24955478125, 78.50702940625, 70.299616, 77.619361, 70.26336599999999, 77.3612975, 70.227226, 77.103328, 70.227226, 77.103328]] }, { "color": "#000", "paths": [[81.186592, 17.061629, 77.768226328125, 17.1605020078125, 71.02825997460937, 18.183787570312496, 64.49489056054688, 20.1339501328125, 58.268650253906245, 22.9401336328125, 52.45007122265625, 26.531482007812492, 47.13968563476563, 30.837139195312496, 42.43802565820313, 35.7862491328125, 38.445623460937504, 41.3079557578125, 36.78264600000001, 44.28082, 35.171348031250005, 48.496357375, 34.146417390625004, 57.452257187499995, 35.67685257812501, 66.3457234375, 39.67172856250001, 74.40761875, 42.66192000000001, 77.803652, 42.07568034375001, 81.268196421875, 42.153153222656265, 88.17821277148437, 43.60274623828126, 94.90373616992187, 46.282434398437516, 101.26520444140627, 50.05019271093751, 107.08305541015625, 54.76399618359376, 112.17772690039064, 60.28181982421876, 116.36965673632812, 66.46163864062501, 119.47928274218751, 69.77412000000001, 120.5158, 73.54253915625002, 121.54300921874999, 81.27566968359376, 122.18197602539063, 88.99196729296877, 121.23689200195312, 96.41100578906253, 118.83496951171875, 103.2523589765625, 115.10342091796875, 109.23560066015625, 110.16945858398438, 114.08030464453125, 104.16029487304687, 117.50604473437501, 97.2031421484375, 118.52252000000001, 93.377275, 119.074465, 89.303993375, 121.44100750000001, 81.546135875, 123.71219000000002, 78.127793, 125.25014085937502, 74.58770361718749, 127.10583837890627, 67.16015255078125, 127.55439533203125, 59.52497934765624, 126.6592611328125, 51.9146558125, 124.48388519531252, 44.56165374999999, 121.09171693359377, 37.698444964843745, 116.54620576171877, 31.557501261718745, 110.91080109375002, 26.371294445312497, 107.66277000000002, 24.263174999999997, 104.68102409375003, 22.461415281249998, 98.31091662500003, 19.641475890624996, 91.59016925000002, 17.807363078124997, 84.67133628125002, 17.009666312499995, 81.18659200000002, 17.061628999999996]] }, { "color": "#d0d", "paths": [[81.301851, 30.56408, 76.6056491875, 30.8101884375, 67.617922703125, 33.370278375, 59.50085401562501, 38.064418124999996, 52.68227115625, 44.5066100625, 49.974451, 48.311312, 50.1534953984375, 47.9888212109375, 50.23482262438966, 47.83043436157226, 50.240135281393066, 47.81703597829819, 50.240633596395625, 47.81494058955694, 50.2406768126648, 47.81425536664889, 50.240632274375045, 47.81392777799189, 50.24055585783496, 47.81375791312949, 50.24048673182663, 47.81367673673418, 50.24040206156895, 47.81362298454235, 50.240301884414485, 47.81359659900021, 50.24012455164948, 47.81360480441061, 50.239831604190634, 47.813715542579, 50.23886934015275, 47.81439871509552, 50.22308721582032, 47.83500201171875, 49.96938725, 48.257563906250006, 49.153576625, 49.76440165625, 48.60014116015624, 50.961000734375, 48.3948343203125, 51.572966679687504, 48.382334, 51.76375, 47.73409878125, 54.367661187500005, 47.8892980625, 59.689438109375, 49.6316099375, 64.729674546875, 52.78893321875, 69.02360834375, 54.892645, 70.68533, 55.434023320312505, 71.23125946875, 56.18842868554687, 72.42269177929688, 56.738493328125, 74.373802734375, 56.363778, 78.59862562499998, 55.723381, 81.30716199999999, 55.46862153125, 85.09927256249999, 57.062475500000005, 92.44618054687498, 60.819056375, 98.984139234375, 66.33689684375, 104.13073359375, 69.679125, 105.90589, 72.03653221875001, 107.002979140625, 77.00756023828126, 108.25130141796876, 82.11872469140624, 108.42724115234374, 87.1841146171875, 107.6004035234375, 92.0178190546875, 105.8403937109375, 96.43392704296875, 103.21681689453126, 100.24652762109375, 99.79927825390627, 103.269709828125, 95.65738296875, 104.38266, 93.310722, 105.5984075, 90.18655075, 106.50827749999999, 83.550141625, 106.1493, 80.216046, 108.69339749999999, 77.399151375, 112.28520281249999, 70.75432575, 113.9999540625, 63.37908600000001, 113.747221875, 55.809909375000004, 112.76715999999999, 52.14569300000001, 112.00989226562498, 49.77986334375001, 109.82825662890625, 45.36440118750001, 106.93916470703124, 41.39111906250001, 103.4460208515625, 37.929731906250005, 99.45222941406247, 35.04995465625001, 95.06119474609372, 32.82150225000001, 90.37632119921872, 31.31408962500001, 85.50101312499999, 30.59743171875001, 83.02278799999999, 30.59472700000001, 82.162645, 30.56066700000001, 81.30184899999999, 30.56416700000001, 50.956171, 46.71357003125, 50.75402529882811, 47.029111712890625, 50.704080107177724, 47.116781847412106, 50.691821948333725, 47.14208913485717, 50.68886304343795, 47.14998550822067, 50.68802689642334, 47.15351891265868, 50.68806891697693, 47.155140585098266, 50.688287504612504, 47.15564579284245, 50.688504130609864, 47.15587252418173, 50.688781515364994, 47.156004706712125, 50.68911964632624, 47.15604215393752, 50.689733125094406, 47.15593218831158, 50.692638107818595, 47.15421585977174, 50.70567386743164, 47.14046238110352, 50.75690434960937, 47.07188945117187, 50.95946134375, 46.76245887500001, 51.18611, 46.385466, 51.18611, 46.385466, 70.3521989375, 77.94337150000001, 70.38500126562501, 79.044206921875, 70.33968173706056, 79.26031678735352, 70.33122668735123, 79.27321976278306, 70.32694371146728, 79.2765967205167, 70.32407776035882, 79.27773391295054, 70.32120782594109, 79.27791037617683, 70.31833869754075, 79.27712071977949, 70.31404539545821, 79.2742354188118, 70.30554904095459, 79.26208935943603, 70.27898970898437, 79.16492415039062, 70.24955478125, 78.50702940625, 70.299616, 77.619361, 70.26336599999999, 77.3612975, 70.227226, 77.103328, 70.227226, 77.103328]] }, { "color": "#000", "paths": [[81.240163, 24.679562, 78.2524898671875, 24.7838740390625, 72.3477021328125, 25.7264318046875, 66.6211393828125, 27.4951849296875, 61.1767513359375, 30.029550007812496, 56.118487710937494, 33.268943632812494, 51.5502982265625, 37.152782398437495, 47.5761326015625, 41.6204828984375, 44.299940554687495, 46.6114617265625, 42.991648, 49.302265000000006, 42.01970425, 52.78824896875, 41.96236271875, 60.05141246875, 44.07166909375, 66.99645521875, 48.2396153125, 72.88164896875, 51.140851999999995, 75.104494, 50.3116776953125, 77.701813796875, 49.58752195703124, 83.00966899609375, 49.910850191406254, 88.32244441796874, 51.199942984375, 93.4946528359375, 53.373080921875, 98.3808070234375, 56.34854458984375, 102.83541975390627, 60.04461457421874, 106.71300380078125, 64.3795714609375, 109.8680719375, 66.782608, 111.09, 69.28482121093751, 112.31925874999999, 74.54225858007813, 113.9058766015625, 79.9693082441406, 114.48931425781248, 85.41708037890625, 114.117459921875, 90.73668516015626, 112.83820179687498, 95.77923276367187, 110.69942808593751, 100.39583336523438, 107.74902699218751, 104.437597140625, 104.03488671874999, 106.16313, 101.87755, 107.565958125, 100.0229675625, 109.76504953125, 95.96213625, 111.22549265625, 91.59173625, 111.93532031250001, 87.0366909375, 111.97299, 84.729079, 113.63285125, 80.38416562500001, 117.0973965625, 74.269863609375, 118.8508646875, 69.96700143749999, 119.24937, 67.619894, 119.77715171875, 64.65920012500001, 119.93246764257813, 58.68663949609376, 119.06837883789063, 52.78440148046875, 117.25254340234376, 47.0988528203125, 114.55261943359375, 41.776360257812506, 111.03626502929687, 36.963290535156254, 106.77113828710938, 32.80601039453125, 101.82489730468748, 29.450886578125, 99.093351, 28.162444, 94.854592, 26.3804235, 85.83882137500001, 24.602476875, 81.240163, 24.679562]] }, { "color": "#d0d", "paths": [[81.301851, 30.56408, 76.26857059374998, 30.87117059375, 66.62967165625, 33.791960515625, 58.06137015625, 39.126119703125006, 51.18300296875, 46.47969125, 48.68021, 50.850165000000004, 47.83006912500001, 53.58886196875001, 47.810825343750004, 59.25230246875, 49.597579968750004, 64.65046421875002, 52.955613937500004, 69.24053096875002, 55.201311000000004, 70.99530200000001, 55.77848610937501, 71.72960659375, 56.474438830078135, 73.27886013085939, 56.75836945312501, 75.73634354687499, 56.20866801562501, 79.175754484375, 55.55654015625001, 82.63214040625002, 55.54539200000001, 84.30431800000001, 55.646137390625, 86.70204464062502, 56.69044893359376, 91.32206419921874, 58.63681448046876, 95.62725530859375, 61.36375524218751, 99.5017202109375, 64.7497924296875, 102.8295611484375, 68.67344725390626, 105.49488036328125, 73.01324092578128, 107.38178009765625, 77.64769465625002, 108.37436259375, 80.04214200000001, 108.45456000000001, 82.30154948437502, 108.43761626562502, 86.76791612695315, 107.72661025390626, 93.14955895312501, 105.35122371875002, 98.64056626171876, 101.3435571640625, 101.68191607617189, 98.02090312109377, 104.06147395898438, 94.21161857421876, 105.65702482031251, 89.98221612500001, 106.08230000000002, 87.71740800000002, 106.32600156250001, 86.27413490625003, 106.32382984375002, 83.37725456250001, 106.45760546875002, 80.6253054375, 107.17890724609376, 78.77570520703125, 108.10133593750001, 77.67231677343752, 108.76092000000001, 77.17578100000001, 110.1520521875, 75.152638984375, 112.25287074218751, 70.76466531250001, 113.54614871093752, 66.08657200000003, 114.04321320312502, 61.25159007812502, 113.755391328125, 56.39295057812502, 112.69401019531252, 51.64388453125001, 110.87039691406251, 47.13762296875001, 108.29587859375002, 43.007396921875014, 106.69999000000001, 41.148927000000015, 104.24306228125002, 38.56491943750001, 98.445395125, 34.436189312500005, 91.87938925, 31.6898273125, 84.86975059375001, 30.4760846875, 81.301849, 30.564149, 50.74753, 47.07245, 70.3443615, 78.116785125, 70.32347102343749, 78.69163918066408, 70.31678291674805, 78.71752314928436, 70.31389592687987, 78.72350885436629, 70.31164312362671, 78.7259385378084, 70.31049269669151, 78.72653365509991, 70.3097174933281, 78.72670567255604, 70.308935422863, 78.72668381448662, 70.30814667765999, 78.7264669123251, 70.3069522397461, 78.72579804085922, 70.30452339257812, 78.72317176927184, 70.30120306384276, 78.7167120465889, 70.2960883857422, 78.70124104074097, 70.2854934140625, 78.64801853173827, 70.24949587500001, 78.26114381250001, 70.229326, 77.55746500000001]] }, { "color": "#000", "paths": [[81.285994, 35.420059, 77.188865625, 35.627677875, 69.35446237500001, 37.863636, 62.272883625000006, 41.961573, 56.300796375000004, 47.562727124999995, 53.910791, 50.855109, 52.85555421875, 52.846170687500006, 51.954375875000004, 57.20316228125, 52.452082999999995, 61.622593156250005, 54.290599156249996, 65.674016, 55.746749, 67.384973, 57.078134375000005, 68.628552375, 59.011245078125, 70.61106675, 59.997651312500004, 72.29086565625, 60.311996, 73.336978, 60.236667000000004, 76.2014355, 59.13322425, 81.86920425000001, 59.311844, 84.75452800000001, 59.558584335937496, 86.67826884375, 60.68227446679688, 90.34033285546876, 63.532328765625, 95.31373021875001, 69.251513203125, 100.42893009375001, 76.35040575, 103.3049139375, 80.194282, 103.57992000000002, 83.94334037499999, 103.45362825000001, 91.06338039062499, 101.11791918750001, 97.07054720312499, 96.65686743750001, 101.23241734375, 90.48648187500001, 102.26982000000001, 86.84507000000002, 102.62245125000001, 85.77241884375002, 102.73583109375002, 83.48006034375001, 102.59508046875001, 81.17550309375002, 102.64739666015626, 79.55847775781251, 102.861557578125, 78.56816327343752, 103.05831, 78.11356300000003, 105.72660625, 75.03356509375003, 108.98962187500001, 67.66384309375002, 109.73680187500001, 59.61095809375003, 107.9375425, 51.728808343750025, 105.96542000000001, 48.17908500000003, 104.00516409375001, 45.253411281250024, 98.895545390625, 40.45305189062503, 92.728384828125, 37.116047828125026, 85.91411175000002, 35.467032062500024, 82.39125600000001, 35.43009000000003, 81.83869100000001, 35.41825000000003, 81.28599400000002, 35.42005000000003, 54.68254925, 49.65389315625001, 54.53117485742188, 49.88931066210938, 54.516934707809455, 49.915888155807494, 54.51592628695298, 49.91860382250596, 54.51582076299596, 49.919520631112334, 54.515851551898834, 49.91970252206033, 54.515889095332405, 49.91979837040056, 54.515941163032196, 49.9198725159936, 54.51600769698135, 49.919925032775495, 54.51608863916303, 49.919955994682255, 54.51618393156037, 49.919965475649924, 54.51635187425221, 49.919942244088055, 54.51662786413867, 49.91983320762116, 54.51714041493035, 49.91952168926811, 54.52229254003906, 49.91452692480468, 54.67774812500001, 49.69924949999999, 54.922745, 49.299833, 54.922745, 49.299833, 69.878406375, 77.40055609375, 69.90711303515624, 78.00329154296875, 69.89650013232422, 78.15164412841797, 69.88698245379638, 78.18783270599366, 69.88237341892432, 78.19532780491829, 69.88045027722072, 78.19723554244517, 69.87847764189434, 78.19841687386989, 69.87645853427124, 78.19887219512938, 69.87439597567747, 78.19860190216065, 69.87229298743914, 78.1976063909006, 69.86907341818998, 78.19484473438263, 69.86242511553954, 78.18461453033447, 69.84854564501953, 78.14535981689451, 69.82048557421874, 77.99193923828125, 69.7794035625, 77.38758203124999, 69.789537, 76.713145, 69.789537, 76.713145]] }, { "color": "#d0d", "paths": [[81.419318, 43.811279, 78.39906612500002, 43.954429749999996, 72.66591546875, 45.60043290624999, 67.47539984375001, 48.59992253124999, 63.0206429375, 52.6438369375, 61.172252, 54.985073, 60.904843390625004, 55.473302640625, 60.557934576171874, 56.52291291601563, 60.41722367187501, 58.180695765624996, 60.976057859375004, 60.335517578125, 61.91103377539062, 61.703350826171885, 62.73760149218751, 62.436652445312504, 63.219914, 62.722796, 64.77328700000001, 64.560032, 66.991121, 67.222579, 67.49725431250002, 67.70150165624999, 68.42518796875001, 68.61344456249998, 68.90473569531251, 69.33907509374998, 69.07724712109376, 69.87051003515626, 69.09012682421874, 70.46094748828125, 68.91213484375001, 71.1273114609375, 68.73189400000001, 71.498476, 68.51682831250001, 72.35431321875001, 68.629288375, 74.06838848437499, 68.92444562500002, 75.728156296875, 68.92986707031251, 76.89394587304687, 68.72653885937501, 77.62352789062498, 68.524634, 77.96809999999999, 67.83007337500001, 79.95137040624999, 67.66041240625, 84.1181978125, 68.85829478125001, 88.10754868749999, 71.31726606250001, 91.45517809374999, 73.032285, 92.68751699999999, 74.93044390624999, 93.95542653125, 79.242373859375, 95.17675142187498, 83.740434171875, 94.90991923437498, 87.9439535, 93.25408099999997, 89.74273600000001, 91.88459099999999, 91.2095615, 90.60184162499999, 93.32786750000002, 87.36219131249999, 94.35097100000002, 83.63768231249999, 94.14910700000001, 79.7884515, 93.48911000000001, 77.94691999999999, 93.24425950781252, 77.487492765625, 93.05875750781252, 76.65116000195312, 93.1812255703125, 75.90296269726562, 93.54825400781252, 75.23080019921875, 94.40788415624999, 74.332928640625, 95.84838703125, 73.29960465625, 96.521803, 72.82294599999999, 97.48821665625002, 71.89670515625, 99.05311275, 69.74064846875, 100.679794875, 66.06000312499998, 101.20698, 63.44544299999998, 101.3739698828125, 61.775589171874984, 101.10748111328125, 58.48134529296874, 99.57265375, 53.78222778125, 95.560504375, 48.505330906249995, 89.96943484375001, 44.966206625000005, 86.738175, 44.17973, 84.0884565, 43.873342, 81.419318, 43.811279, 74.92602608593751, 75.49251877929686, 74.86884208911133, 75.59349555517579, 74.73132305664063, 75.71579798046876, 74.349455453125, 75.863166125, 74.02239354296876, 75.88939245312498, 73.95644805072021, 75.87605068005371, 73.9468380207405, 75.86996214505767, 73.94415844721556, 75.86654251501369, 73.94316496734046, 75.86413190105057, 73.94286767940712, 75.86161127098465, 73.94328204058122, 75.85898263160038, 73.94517795046616, 75.85485441893769, 73.95386985412597, 75.84593155346678, 74.12830309374999, 75.77820978124998, 74.659079, 75.69625099999999, 74.70980017968752, 75.66005161328124, 74.79811241455079, 75.61922719287108, 74.87160441650391, 75.61058504248047, 74.93131609277344, 75.62778410253907, 74.97828735058596, 75.66448331347655, 75.01355809716799, 75.71434161572265, 75.04793814843752, 75.80026799218749, 75.05956634179688, 75.87946047460937, 75.05843411572266, 75.9185445463867, 75.05413063229369, 75.93307733218384, 75.05185664243317, 75.93680496294402, 75.04991040157128, 75.9385684659443, 75.04851437248135, 75.93928426804828, 75.04703606080913, 75.9395926292963, 75.04547749762344, 75.93948116480638, 75.04300302095032, 75.93855605137634, 75.03942875832367, 75.93566554938505, 75.0335716135254, 75.92798850756836, 74.9890415625, 75.802790125, 74.93909500000001, 75.434671]] }, { "color": "#000", "paths": [[81.467895, 46.855538, 78.7841308125, 46.995731125, 73.689476296875, 48.489937609375005, 69.087570234375, 51.194806046875, 65.16207909375001, 54.83708940625, 63.550048000000004, 56.946353, 63.413910468750004, 57.422641671875, 63.43040090039062, 58.270182869140626, 63.72681137695312, 59.01559415820313, 64.22914351171875, 59.68544605859375, 65.20425764062502, 60.60781470312501, 66.55647121875, 61.813008406250006, 67.04545900000001, 62.480095000000006, 68.240162, 64.02604925000001, 70.22593671875, 66.21129537499999, 71.8019260625, 67.34431025, 72.71991700000001, 67.72815, 72.35030037500002, 69.459734, 71.62898281250003, 72.03604967187499, 71.53110284375, 73.78603746875001, 71.74259500000001, 74.684038, 72.01079050000001, 75.65443003125, 71.90886517187502, 77.500939078125, 71.382276109375, 79.289525765625, 70.81026315625, 81.08153193749999, 70.64754500000001, 82.001963, 70.60655644531252, 82.93223538281251, 70.86196922656251, 84.73392461718748, 71.87399553124999, 87.24538678125, 74.28016203125001, 89.97252553125, 77.48158540625, 91.71859228125, 79.27316300000001, 92.063772, 80.368578265625, 92.18996100781251, 82.56458078515627, 92.02736086132813, 85.72645221875001, 90.99658535937499, 88.39915660156251, 89.01938898828125, 89.81249183984377, 87.34251545117186, 90.81987566796877, 85.41145424023438, 91.33719425000001, 83.275957625, 91.36011700000002, 82.141685, 91.07098000000002, 80.7103835, 90.19822825000001, 77.88587374999999, 90.08987500000002, 76.405631, 90.00496990625003, 75.78625984375, 90.13089092187502, 74.6154746875, 90.60159973437501, 73.5746108125, 91.40588562500002, 72.71741565625, 91.94281500000002, 72.385502, 93.31817600000002, 71.43575875, 95.268240125, 69.845900828125, 96.29627731250002, 68.54678284375001, 96.65694800000003, 67.77136, 97.57658921875003, 65.89595543749999, 98.32660815625003, 61.839444171875, 97.83557415625003, 57.737452859375, 96.17689084375002, 53.947050968750005, 94.88855500000003, 52.31558, 93.72327459375003, 51.0264683125, 90.94906246875001, 48.94941971875001, 87.78370171875002, 47.53993609375, 84.38411784375003, 46.871523249999996, 82.64558000000002, 46.873661, 82.05691650000003, 46.852686, 81.46789500000003, 46.855540999999995, 81.46789500000003, 46.855537999999996]] }, { "color": "#d0d", "paths": [[81.506652, 49.281746, 79.1668495625, 49.39308546875, 74.74736876562503, 50.687213, 70.743396828125, 53.022285874999994, 67.26977815625, 56.126311906249995, 65.797016, 57.896724999999996, 67.857805375, 59.553468624999994, 71.128742875, 63.781082125, 73.24519599999999, 65.364717, 73.62212741406249, 65.51813560156249, 74.28961145312499, 65.58229038476561, 74.870533421875, 65.40760570507811, 75.38388496093751, 65.05228094140624, 76.07127334375, 64.312297484375, 76.92045353124999, 63.2162, 77.368533, 62.78418, 78.3424535, 62.099708625, 80.011571234375, 61.32713062500001, 80.88586061914063, 61.21105948828125, 81.4746880859375, 61.2724133203125, 81.769499, 61.361364, 81.82851091796874, 61.46256991015625, 81.88517959448242, 61.65753851049804, 81.8752640817871, 61.84454194311524, 81.80658882666015, 62.024654314941415, 81.44878360937498, 62.453792984375006, 80.46835454687499, 63.100867671875, 79.71654354882813, 63.596837626953125, 79.3193056796875, 63.94724114843749, 79.183155, 64.132977, 77.02541, 66.0847535, 74.66445678124998, 69.785748875, 73.96355037500001, 72.57407412500001, 74.035248, 74.061813, 74.02825784375, 74.51755615625, 74.25739362499999, 75.425994078125, 74.892524375, 76.6434785, 75.31102399999999, 77.169385, 74.3987916875, 78.23521809375, 73.278599046875, 80.848562671875, 73.119371984375, 83.670783984375, 73.7450816035156, 85.66189008398439, 74.50685808593747, 86.84514023437501, 75.01734299999998, 87.36453, 75.78454759374999, 88.01130284375, 77.52153339062498, 89.037597921875, 79.42794507812498, 89.651045234375, 81.42193149999997, 89.7492591875, 82.42471999999998, 89.545291, 83.79465256249998, 89.18314303125001, 86.279154640625, 87.70074745312499, 88.124983953125, 85.50672464062501, 88.82801218554687, 83.51640613476565, 88.92584194531247, 82.09202048437501, 88.82363099999998, 81.35614000000001, 88.81822083593747, 81.04756505468751, 88.6678727597656, 80.43295109375, 88.23406235937497, 79.52972103125, 87.49688867187497, 78.40837878125002, 87.07411496679686, 77.66890554687501, 86.96091440014646, 77.33859293457033, 86.93275321484371, 77.13443924023439, 86.93808899999998, 77.03849400000001, 87.23217917187498, 76.76071116406251, 87.59817091601559, 76.11118470898438, 87.82555864062498, 74.99936876562502, 87.930111453125, 73.42475220312501, 88.28601226367185, 72.35050031445314, 88.79220010156249, 71.74195282812502, 89.17585999999997, 71.49035100000002, 90.74391199999998, 70.26163575000001, 93.16320382812498, 68.44698215625002, 94.41465434374997, 66.92847525000002, 94.80695299999996, 65.97377500000002, 95.23607507812497, 65.09455080468751, 95.76231169921871, 63.25993104492189, 95.90356528124997, 60.42806039062502, 94.89494015624996, 56.746984078125024, 92.80115812499997, 53.52871575000002, 91.38879099999997, 52.25362800000002, 89.55257762499997, 50.86739300000002, 85.22591424999996, 49.413217625000016, 82.93353399999997, 49.31172700000002, 82.22046449999996, 49.27909200000002, 81.50665199999996, 49.28174700000002]] }, { "color": "#000", "paths": [[81.755859, 51.279297, 79.84011993750002, 51.3464840625, 76.166127984375, 52.27827768750001, 71.18470762499999, 55.07871525, 68.548828, 57.832031, 71.291992, 60.600586, 74.035156, 63.369141, 75.31969000000001, 61.98178625, 77.5819444375, 60.2266475, 79.2905944375, 59.43410018749999, 80.223509, 59.227587, 81.32593775, 59.20151575, 82.99021146874999, 59.564444968749996, 83.67986701953124, 59.99903182421875, 84.054270828125, 60.404864968750005, 84.20383000000001, 60.654527, 84.30683031250001, 60.8812230625, 84.40175842187502, 61.332474085937505, 84.37989760937502, 61.7761014296875, 84.25957909375, 62.206489140624996, 83.94117137500001, 62.818371437500005, 83.32976275000001, 63.532317625000005, 82.991336, 63.826977, 81.27322625000001, 65.24519674999999, 78.64988492187501, 67.36676299999999, 77.20024821875002, 69.040719125, 76.66741900000001, 70.039548, 76.34739050000002, 71.107427625, 76.34899662500001, 73.3358385, 76.35462000000001, 74.44718999999999, 76.36286000000001, 75.10640749999999, 76.37109000000001, 75.76562499999999, 81.07030850000001, 75.76562499999999, 85.76952700000001, 75.76562499999999, 85.77926200000002, 74.92650274999998, 85.76030575000001, 73.24384924999998, 85.86024700000002, 72.41431199999998, 86.15976956250002, 71.82172834374998, 87.01279870312501, 70.84101287499996, 88.58911012500002, 69.62096162499998, 89.61931900000002, 68.81545699999998, 91.23364475000002, 67.50905899999998, 93.08347850000001, 64.99245110937497, 93.76514075000003, 63.05411046874998, 93.84179600000002, 61.99929899999998, 93.84954031250001, 60.75631974999998, 93.37050964062502, 58.31334428124998, 92.319437703125, 56.067339906249984, 90.72008215625002, 54.17985268749998, 89.70086200000001, 53.446070999999975, 87.89273187500001, 52.38990212499998, 83.84315675000002, 51.354549624999976, 81.75585600000001, 51.27929699999997]] }, { "color": "#d0d", "paths": [[74.999967, 82.419581, 75.05809265625, 83.25658621874999, 75.64757474999999, 84.7934559375, 76.689529875, 86.08263206249998, 78.05573146875, 87.03175378124999, 78.82585, 87.32999, 80.10662075, 87.654387625, 82.74214025, 87.44790474999999, 83.964501, 86.948988, 84.55167565624998, 86.632987125, 85.56083384375, 85.763521828125, 86.31683084375001, 84.66933989062501, 86.75863128125, 83.41737421875, 86.825728, 82.750748, 86.84417590625, 82.03554359375, 86.53425321875, 80.65180390625001, 85.86094446875, 79.40094190625, 84.88291203124999, 78.36837396875, 84.288926, 77.975077, 83.61229571875, 77.60365399999999, 82.13808751562499, 77.14028796874999, 80.59510295312501, 77.02031909375, 79.06818737500001, 77.2526598125, 78.343242, 77.518968, 77.63506675, 77.8594510625, 76.42416784374998, 78.856133, 75.53365196875001, 80.145281, 75.0455648125, 81.6309029375, 74.999967, 82.419581]] }], "aabb": { "minX": 23.78321038671875, "minY": 6.568751721679687, "maxX": 137.92546625, "maxY": 132.54974906249998 } });

/***/ }),
/* 2 */
/*!***********************************!*\
  !*** ./node_modules/raf/index.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(/*! performance-now */ 4)
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf
  object.cancelAnimationFrame = caf
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 3)))

/***/ }),
/* 3 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 4 */
/*!*************************************************************!*\
  !*** ./node_modules/performance-now/lib/performance-now.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

//# sourceMappingURL=performance-now.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 5)))

/***/ }),
/* 5 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 6 */
/*!****************************************!*\
  !*** ./node_modules/domready/ready.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (true) module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , hack = doc.documentElement.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)


  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? setTimeout(fn, 0) : fns.push(fn)
  }

});


/***/ }),
/* 7 */
/*!**********************!*\
  !*** ./src/noise.js ***!
  \**********************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * A fast javascript implementation of simplex noise by Jonas Wagner
 *
 * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
 * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 *
 *
 * Copyright (C) 2016 Jonas Wagner
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

// Code take from NPM module "simplex-noise", but only the noise2D code

var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);
var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;

var SimplexNoise = function () {
    function SimplexNoise(random) {
        _classCallCheck(this, SimplexNoise);

        if (!random) {
            random = Math.random;
        }
        this.p = buildPermutationTable(random);
        this.perm = new Uint8Array(512);
        this.permMod12 = new Uint8Array(512);
        for (var i = 0; i < 512; i++) {
            this.perm[i] = this.p[i & 255];
            this.permMod12[i] = this.perm[i] % 12;
        }
        this.grad3 = new Float32Array([1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0, 1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, -1, 0, 1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1]);
        this.grad4 = new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1, -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1, 1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1, -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);
    }

    _createClass(SimplexNoise, [{
        key: "noise2D",
        value: function noise2D(xin, yin) {
            var permMod12 = this.permMod12;
            var perm = this.perm;
            var grad3 = this.grad3;
            var n0 = 0; // Noise contributions from the three corners
            var n1 = 0;
            var n2 = 0;
            // Skew the input space to determine which simplex cell we're in
            var s = (xin + yin) * F2; // Hairy factor for 2D
            var i = Math.floor(xin + s);
            var j = Math.floor(yin + s);
            var t = (i + j) * G2;
            var X0 = i - t; // Unskew the cell origin back to (x,y) space
            var Y0 = j - t;
            var x0 = xin - X0; // The x,y distances from the cell origin
            var y0 = yin - Y0;
            // For the 2D case, the simplex shape is an equilateral triangle.
            // Determine which simplex we are in.
            var i1 = void 0,
                j1 = void 0; // Offsets for second (middle) corner of simplex in (i,j) coords
            if (x0 > y0) {
                i1 = 1;
                j1 = 0;
            } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
            else {
                    i1 = 0;
                    j1 = 1;
                } // upper triangle, YX order: (0,0)->(0,1)->(1,1)
            // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
            // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
            // c = (3-sqrt(3))/6
            var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
            var y1 = y0 - j1 + G2;
            var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
            var y2 = y0 - 1.0 + 2.0 * G2;
            // Work out the hashed gradient indices of the three simplex corners
            var ii = i & 255;
            var jj = j & 255;
            // Calculate the contribution from the three corners
            var t0 = 0.5 - x0 * x0 - y0 * y0;
            if (t0 >= 0) {
                var gi0 = permMod12[ii + perm[jj]] * 3;
                t0 *= t0;
                n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient
            }
            var t1 = 0.5 - x1 * x1 - y1 * y1;
            if (t1 >= 0) {
                var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;
                t1 *= t1;
                n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);
            }
            var t2 = 0.5 - x2 * x2 - y2 * y2;
            if (t2 >= 0) {
                var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;
                t2 *= t2;
                n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);
            }
            // Add contributions from each corner to get the final noise value.
            // The result is scaled to return values in the interval [-1,1].
            return 70.0 * (n0 + n1 + n2);
        }
    }]);

    return SimplexNoise;
}();

function buildPermutationTable(random) {
    var i = void 0;
    var p = new Uint8Array(256);
    for (i = 0; i < 256; i++) {
        p[i] = i;
    }
    for (i = 0; i < 255; i++) {
        var r = i + 1 + ~~(random() * (255 - i));
        var aux = p[i];
        p[i] = p[r];
        p[r] = aux;
    }
    return p;
}
SimplexNoise._buildPermutationTable = buildPermutationTable;

/* harmony default export */ __webpack_exports__["a"] = (SimplexNoise);

/***/ })
/******/ ]);
//# sourceMappingURL=bundle-main.js.map